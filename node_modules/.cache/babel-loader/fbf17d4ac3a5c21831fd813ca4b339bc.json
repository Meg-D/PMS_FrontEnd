{"ast":null,"code":"var _jsxFileName = \"/home/megd/Documents/sem3/sdp/PMS_FrontEnd/src/components/Medicine/UpdateMedicines.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Form, FormGroup, Label, Input, Button, ModalHeader, ModalBody, ModalFooter, Modal } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport base_url from '../../api/bootapi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Updatemedicine = props => {\n  _s();\n\n  const [medicines, setmedicines] = useState([]);\n  const [medicine, setmedicine] = useState([]);\n\n  const getAllmedicine = () => {\n    axios.get(`${base_url}/medicine/getAll`).then(response => {\n      console.log(response.data);\n      setmedicines(response.data);\n      console.log(medicines);\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  const updateMedicine = () => {\n    axios.put(`${base_url}/medicine/update`, medicine).then(response => {\n      console.log(response.data);\n      toast(\"Medicine Updated !!\", {\n        position: \"bottom-center\"\n      });\n    }, error => {\n      toast.error(\"Medicine could not be updated, Try Again!\");\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    getAllmedicine();\n  }, []);\n  const {\n    className\n  } = props;\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"examplemedicine\",\n        children: \"Select medicine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"select\",\n        name: \"select\",\n        id: \"medicineSelect\",\n        onChange: e => {\n          const medicineName = e.target.value;\n\n          for (var i = 0; i < medicines.length; i++) {\n            var obj = medicines[i];\n\n            if (obj.name == medicineName) {\n              setmedicine(obj);\n            }\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"[Select one]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), medicines.length > 0 ? medicines.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 72\n        }, this)) : \"No medicine\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"examplemedicine\",\n        children: \"Medicine Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        name: \"medicine\",\n        id: \"examplmedicine\",\n        value: medicine.name,\n        onChange: e => {\n          setmedicine({ ...medicine,\n            name: e.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"examplequant\",\n        children: \"Quantity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"number\",\n        name: \"quantity\",\n        id: \"exampleQuant\",\n        value: medicine.quantity_left,\n        onChange: e => {\n          setmedicine({ ...medicine,\n            quantity_left: e.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"exampleCost\",\n        children: \"Cost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"double\",\n        name: \"cost\",\n        id: \"exampleCost\",\n        value: medicine.cost,\n        onChange: e => {\n          setmedicine({ ...medicine,\n            cost: e.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"success\",\n      onClick: () => {\n        console.log(medicine);\n        updateMedicine();\n      },\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Updatemedicine, \"cbtBuvxsBM5T6pjXVx972ychExQ=\");\n\n_c = Updatemedicine;\nexport default Updatemedicine;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updatemedicine\");","map":{"version":3,"sources":["/home/megd/Documents/sem3/sdp/PMS_FrontEnd/src/components/Medicine/UpdateMedicines.js"],"names":["React","useEffect","useState","Form","FormGroup","Label","Input","Button","ModalHeader","ModalBody","ModalFooter","Modal","axios","toast","base_url","Updatemedicine","props","medicines","setmedicines","medicine","setmedicine","getAllmedicine","get","then","response","console","log","data","error","updateMedicine","put","position","className","modal","setModal","toggle","e","medicineName","target","value","i","length","obj","name","map","item","quantity_left","cost"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Button, ModalHeader, ModalBody, ModalFooter, Modal\r\n} from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport {toast} from \"react-toastify\";\r\nimport base_url from '../../api/bootapi';\r\n\r\nconst Updatemedicine = (props) => {\r\n\r\n    const [medicines,setmedicines]=useState([]);\r\n    const [medicine,setmedicine]=useState([]);\r\n\r\n\r\n\r\n    const getAllmedicine=()=>{\r\n        axios.get(`${base_url}/medicine/getAll`).then(\r\n            (response)=>{\r\n                console.log(response.data);\r\n                setmedicines(response.data);\r\n                console.log(medicines)\r\n            },\r\n            (error)=>{\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    const updateMedicine = () =>{\r\n            axios.put(`${base_url}/medicine/update`,medicine).then(\r\n                (response)=>{\r\n                    console.log(response.data);\r\n                    toast(\"Medicine Updated !!\",{\r\n                        position: \"bottom-center\",\r\n                    });\r\n                },\r\n                (error)=>{\r\n                    toast.error(\"Medicine could not be updated, Try Again!\");\r\n                    console.log(error);\r\n                }\r\n            );\r\n        }\r\n\r\n\r\n    useEffect(()=>{\r\n        getAllmedicine();\r\n    },[]);\r\n\r\n\r\n\r\n    const {\r\n        className\r\n    } = props;\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const toggle = () => setModal(!modal);\r\n\r\n    return (\r\n        <Form>\r\n            <FormGroup>\r\n                <Label for=\"examplemedicine\">Select medicine</Label>\r\n                <Input type=\"select\" name=\"select\" id=\"medicineSelect\" onChange={(e) => {\r\n                    const medicineName = e.target.value;\r\n                    for(var i=0;i<medicines.length;i++){\r\n                        var obj = medicines[i];\r\n                        if(obj.name == medicineName){\r\n                            setmedicine(obj)\r\n                        }\r\n                    }\r\n\r\n\r\n                }}>\r\n                    <option>[Select one]</option>\r\n                    {\r\n                        medicines.length > 0 ? medicines.map((item) => <option>{item.name}</option>) : \"No medicine\"\r\n                    }\r\n                </Input>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                            <Label for=\"examplemedicine\">Medicine Name</Label>\r\n                            <Input type=\"text\" name=\"medicine\" id=\"examplmedicine\" value={medicine.name} onChange={(e) => {\r\n                                setmedicine({...medicine, name : e.target.value})\r\n\r\n                            }}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"examplequant\">Quantity</Label>\r\n                            <Input type=\"number\" name=\"quantity\" id=\"exampleQuant\" value={medicine.quantity_left} onChange={(e) => {\r\n                                setmedicine({...medicine, quantity_left : e.target.value})\r\n                            }}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                             <Label for=\"exampleCost\">Cost</Label>\r\n                             <Input type=\"double\" name=\"cost\" id=\"exampleCost\" value={medicine.cost} onChange={(e) => {\r\n                                setmedicine({...medicine, cost : e.target.value})\r\n                                      }}/>\r\n                        </FormGroup>\r\n                        <Button color=\"success\" onClick={()=>{\r\n                            console.log(medicine);\r\n                            updateMedicine();\r\n                        }}>Submit</Button>\r\n            <hr/>\r\n        </Form>\r\n\r\n    );\r\n}\r\n\r\nexport default Updatemedicine;"]},"metadata":{},"sourceType":"module"}